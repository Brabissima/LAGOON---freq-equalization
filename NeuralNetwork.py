# -*- coding: utf-8 -*-
"""MNN - Malu Neural Network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13m_rZwgufaygfrx0MZKXkDMaFMFi_vxg
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim


class NeuralNetwork(nn.Module):

    def __init__(self, shape_columns):
        super(NeuralNetwork, self).__init__()
        print(f'shape: {shape_columns}')
        self.fc1 = nn.Linear(shape_columns, 120, dtype=torch.float64)  # IN: 8 features | OUT: 120
        self.fc2 = nn.Linear(120, 240, dtype=torch.float64)
        self.fc3 = nn.Linear(240, 100, dtype=torch.float64)
        self.out = nn.Linear(100, 2, dtype=torch.float64) # OUT: 2 classes

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = F.relu(self.fc3(x))
        x = self.out(x)
        out = F.softmax(x, dim=1) # The softmax here to be balanced
        return out